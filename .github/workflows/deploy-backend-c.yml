#name: Deploy Backend-c
#
#on:
#  push:
#    branches:
#      - main  # main 브랜치에 push될 때 실행
#
#jobs:
#  backend-c:
#    runs-on: ubuntu-latest  # 실행 환경을 Ubuntu로 설정 (Windows 환경에서 Java 17을 설치하는 방법도 있지만, Ubuntu에서 설정하는 방법이 더 일반적입니다)
#
#    steps:
#      # 1. 코드 체크아웃
#      - name: Checkout Code
#        uses: actions/checkout@v3
#        with:
#          path: cicdtest4  # 경로를 정확하게 확인
#
#      # 2. Java 17 설치 (Temurin JDK 사용)
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'  # Java 17 버전 설치
#          distribution: 'temurin'  # JDK 배포판 지정 (Temurin)
#
#      # 3. Gradle 실행 권한 부여
#      - name: Grant execute permission to gradlew
#        run: chmod +x cicdtest4/backend/gradlew  # gradlew에 실행 권한 부여
#
#      # 4. Gradle로 빌드
#      - name: Build with Gradle
#        run: |
#          cd cicdtest4/backend  # 정확한 경로로 이동
#          ls -la  # 디렉토리 내용 확인
#          ./gradlew clean build  # gradlew로 빌드 실행
#
#
#
#      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
#      - name: Build and Push Docker Image
#        run: |
#          cd cicdtest4/backend
#          docker build -t ckdgkim/backendproject:back-1 .
#          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
#          docker push ckdgkim/backendproject:back-1
#
#
#
#
#      - name: Deploy to EC2 via Bastion
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.QWE_PEM }}" > ~/.ssh/qwe.pem
#          chmod 600 ~/.ssh/qwe.pem
#
#          # 베스천 서버로 접속
#          echo "Step 1: Connecting to Bastion server ("${{ vars.PUB_IP_C }}")"
#          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/qwe.pem ec2-user@"${{ vars.PUB_IP_C }}" << EOF
#            echo "Connected to Bastion server ("${{ vars.PUB_IP_C }}")"
#
#            # 사내 EC2로 접속
#            echo "Step 2: Connecting to internal EC2 ("${{ vars.PRIVATE_IP_C }}")"
#            ssh -i /home/ec2-user/qwe.pem ec2-user@"${{ vars.PRIVATE_IP_C }}" << 'INNER_EOF'
#              echo "Connected to internal EC2 ("${{ vars.PRIVATE_IP_C }}")"
#
#              # Docker 이미지 가져오기
#              docker pull ckdgkim/backendproject:back-1
#
#              # 네트워크 생성 (이미 존재하면 무시)
#              docker network create mynetwork || true
#
#              # 기존 컨테이너 종료 및 삭제
#              docker stop backend-container-c || true
#              docker rm backend-container-c || true
#
#              # 새 컨테이너 실행
#              docker run  -d --name backend-container-c \
#                --network mynetwork \
#                -p 8080:8080 \
#                -e DB_HOST="${{ vars.PRIVATE_IP_A }}" \
#                -e DB_PORT=3306 \
#                -e DB_USER=root \
#                -e DB_PASSWORD=1234 \
#                -e MONGODB_URI=mongodb://"${{ vars.PRIVATE_IP_A }}":27017/mydb2 \
#                -e REDIS_HOST="${{ vars.PRIVATE_IP_A }}" \
#                ckdgkim/backendproject:back-1
#
#              exit
#            INNER_EOF
#
#            eixt
#          EOF
